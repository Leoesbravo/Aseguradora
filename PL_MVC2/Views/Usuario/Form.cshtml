@model ML.Usuario
@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h2>Usuario</h2>
            <h5>Ingrese los datos del usuario:</h5>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <hr />
        </div>
    </div>


    <div class="row">
        <div class="col-md-12">
            @using (Html.BeginForm("Form", "Usuario", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="form-horizontal">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.IdUsuario, new { @class = "hidden" })
                            @Html.TextBoxFor(model => model.IdUsuario, new { @class = "hidden form-control", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.IdUsuario)
                            @*hidden*@
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Nombre, new { @class = "", @id = "lblNombre" })
                            @Html.TextBoxFor(model => model.Nombre, new { @class = "form-control", @id = "txtNombre", @onkeypress = "return SoloLetras(this)" })
                            @*@Html.ValidationMessageFor(model => model.Nombre, null, new { @class = "text-danger" })*@
                            @Html.LabelFor(model => model.Nombre, null, new { @class = "text-danger hidden", @id = "lblErrorNombre" })
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.ApellidoPaterno, new { @class = "", @id = "lblApellidoPaterno" })
                            @Html.TextBoxFor(model => model.ApellidoPaterno, new { @class = "form-control", @id ="txtApellidoPaterno" , @onkeypress = "return SoloLetras(this)" })
                            @Html.ValidationMessageFor(model => model.ApellidoPaterno, null, new { @class = "text-danger", @id = "lblErrorApellidoPaterno" } )
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.ApellidoMaterno, new { @class = "", @id = "lblApellidoMaterno" })
                            @Html.TextBoxFor(model => model.ApellidoMaterno, new { @class = "form-control", @id = "txtApellidoMaterno", @onkeypress = "return SoloLetras(this)" } )
                            @Html.ValidationMessageFor(model => model.ApellidoMaterno, null, new { @class = "text-danger", @id = "lblErrorApellidoMaterno" } )
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.UserName)
                            @Html.TextBoxFor(model => model.UserName, new { @class = "form-control", @id = "txtUsername", })
                            @Html.ValidationMessageFor(model => model.UserName, null, new { @class = "text-danger" })
                        </div>
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.Sexo)
                            <br/>
                                Hombre
                                @Html.RadioButtonFor(model => model.Sexo, "H")
                                Mujer
                                @Html.RadioButtonFor(model => model.Sexo, "M")
                                @Html.ValidationMessageFor(model => model.Sexo, null, new { @class = "text-danger" })
                            </div>
                            <div class="col-md-2">
                                @Html.LabelFor(model => model.Telefono)
                                @Html.TextBoxFor(model => model.Telefono, new { @class = "form-control", @id = "txtTelefono", @onkeypress = "return SoloNumeros(this)" } )
                                @Html.ValidationMessageFor(model => model.Telefono, null, new { @class = "text-danger", @id = "lblErrorTelefono" })
                            </div>
                        </div>                
                    <div class="form-group">
                       
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.Celular)
                            @Html.TextBoxFor(model => model.Celular, "{0:#.#}", new { @class = "form-control", @id = "txtCelular", @onkeypress = "return SoloNumeros(this)"  })
                            @Html.ValidationMessageFor(model => model.Celular, null, new { @class = "text-danger", @id = "lblErrorCelular" })
                        </div>
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.FechaNacimiento)
                            @Html.TextBoxFor(model => model.FechaNacimiento, "{0:#.#}", new { @class = "form-control", placeholder = "dd/MM/yyyy" })
                            @Html.ValidationMessageFor(model => model.FechaNacimiento, null, new { @class = "text-danger" })
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Email, new { @class = "", @id = "lblEmail" })
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id = "txtEmail", @onblur = "return ValidarEmail(this)" })
                            @Html.LabelFor(model => model.Email, null, new { @class = "text-danger ", @style = "display:none", @id = "lblErrorEmail" })
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Email, new { @class = "", @id = "lblEmailValidar" })
                            @Html.TextBoxFor(model => model.Email, new { @class = "form-control", @id = "txtEmailConfirmar", @onblur = "return MatchEmail(this)", placeholder = "Confirma tu Email" })
                            @Html.LabelFor(model => model.Email, new { @class = "text-danger ", @style = "display:none", @id = "lblErrorEmailConfirmar" })
                        </div>
                    </div>
                    <div class="form-group">                       
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Curp)
                            @Html.TextBoxFor(model => model.Curp, "{0:#.#}", new { @class = "form-control", @id = "txtCurp", @onblur = "return ValidarCurp(this)" })
                            @Html.ValidationMessageFor(model => model.Curp, null, new { @class = "text-danger", @id = "lblErrorCurp" })
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.Paises, new { @class = "control-label" })
                            @if (Model.Direccion.Colonia.Municipio.Estado.Pais.Paises == null)
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, new SelectList(string.Empty, "Value", "Text"), "Selecciona un Estado", htmlAttributes: new { id = "ddlPais", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, null, new { @class = "text-danger" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Pais.Paises, "IdPais", "Nombre"), "Selecciona un país", htmlAttributes: new { id = "ddlPais", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Direccion.Colonia.Municipio.Estado.Pais.IdPais, null, new { @class = "text-danger" })
                            }
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Direccion.Colonia.Municipio.Estado.Estados, new { @class = "control-label" })
                            @if (Model.Direccion.Colonia.Municipio.Estado.Estados == null)
                            {
                                @*model.Categoria.IdCategoria*@
                                @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(string.Empty, "Value", "Text"), "Selecciona un Estado", htmlAttributes: new { id = "ddlEstado", @class = "form-control" })

                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.Estado.IdEstado, new SelectList(Model.Direccion.Colonia.Municipio.Estado.Estados, "IdEstado", "Nombre"), "Selecciona un Estado", htmlAttributes: new { id = "ddlEstado", @class = "form-control" })
                            }
                        </div>

                        
                    </div>                 
                    <div class="form-group">                    
                                                                   
                            
                            <div class="col-md-4">
                                @Html.LabelFor(model => model.Direccion.Colonia.Municipio.Municipios, new { @class = "control-label" })
                                @if (Model.Direccion.Colonia.Municipio.Municipios == null)
                                {
                                    @*model.Categoria.IdCategoria*@
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(string.Empty, "Value", "Text"), "Selecciona un Municipio", htmlAttributes: new { id = "ddlMunicipio", @class = "form-control" })

                                }
                                else
                                {
                                    @Html.DropDownListFor(model => model.Direccion.Colonia.Municipio.IdMunicipio, new SelectList(Model.Direccion.Colonia.Municipio.Municipios, "IdMunicipio", "Nombre"), "Selecciona un Municipio", htmlAttributes: new { id = "ddlMunicipio", @class = "form-control" })
                                }
                            </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Direccion.Colonia.Colonias, new { @class = "control-label" })
                            @if (Model.Direccion.Colonia.Colonias == null)
                            {
                                @*model.Categoria.IdCategoria*@
                                @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(string.Empty, "Value", "Text"), "Selecciona una Colonia", htmlAttributes: new { id = "ddlColonia", @class = "form-control" })

                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.Direccion.Colonia.IdColonia, new SelectList(Model.Direccion.Colonia.Colonias, "IdColonia", "Nombre"), "Selecciona una Colonia", htmlAttributes: new { id = "ddlColonia", @class = "form-control" })
                            }
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Direccion.Calle)
                            @Html.TextBoxFor(model => model.Direccion.Calle, new { @class = "form-control", @id = "txtDireccion", })
                            @Html.ValidationMessageFor(model => model.Direccion.Calle)
                        </div>
                        </div>                                
                    <div class="form-group">
                        <div class="col-md-2">
                            @Html.LabelFor(model => model.Direccion.NumeroExterior)
                            @Html.TextBoxFor(model => model.Direccion.NumeroExterior, "{0:#.#}", new { @class = "form-control txtNumeroExteriorClase", @id = "txtNumeroExterior", @onblur = "VerificarRango(this)" })
                            @Html.ValidationMessageFor(model => model.Direccion.NumeroExterior, null, new { @class = "text-danger" })
                            @Html.LabelFor(model => model.Direccion.NumeroExterior, new { @class = "text-danger", @style = "display:none", @id = "lblErrorNumeroExterior" })
                        </div>
                        <div class="col-md-2">

                            @Html.LabelFor(model => model.Direccion.NumeroInterior, new { @class = "", @id = "lblNumeroInterior" })
                            @Html.TextBoxFor(model => model.Direccion.NumeroInterior, new { @class = "form-control", @id = "txtNumeroInterior", @onblur = "VerificarRangoInterior(this)" })
                            @Html.ValidationMessageFor(model => model.Direccion.NumeroInterior, null, new { @class = "text-danger", @id = "lblErrorNumeroInterior" })
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Password, new {@class = "", @id ="lblPassword"})
                            @Html.TextBoxFor(model => model.Password, new { @class = "form-control", @id = "txtPassword", @onblur = "return VerificarPassword(this)", placeholder = "Minimo 8 caracteres" })
                            @Html.ValidationMessageFor(model => model.Password, null, new { @class = "text-danger", @id ="lblErrorPassword" })
                        </div>
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Password, new { @class = "", @id = "lblPasswordConfirmar" })
                            @Html.TextBoxFor(model => model.Password, new { @class = "form-control", @id = "txtPasswordConfirmar", @onblur = "return CompararPassword(this)", placeholder = "Confirma tu password" })
                            @Html.ValidationMessageFor(model => model.Password, null, new { @class = "text-danger", @id = "lblErrorPasswordConfirmar" })
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-4">
                            @Html.LabelFor(model => model.Imagen)
                            <input type="file" name="ImagenData" onchange="Previsualizar(this);">
                            @if (Model.Imagen != null)
                            {

                                <img id="ImagenPreview" src="data:image/jpeg;base64,@Convert.ToBase64String(Model.Imagen)" width="200" height="200" />
                            }
                            else
                            {
                                <img id="ImagenPreview" src="~/Images/FotoVacia.png" style=" height:200px; width:200px;" />
                            }
                            @Html.ValidationMessageFor(model => model.Imagen)
                        </div>
                        @Html.HiddenFor(model => model.Imagen)
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Direccion.Colonia.IdColonia, new { @class = "hidden" })
                            @Html.TextBoxFor(model => model.Direccion.Colonia.IdColonia, new { @class = "hidden form-control", autocomplete = "off" })
                            @*@Html.ValidationMessageFor(model => model.Direccion.Colonia.IdColonia)*@
                            @*hidden*@
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            <input type="submit" value="Guardar" class="btn btn-success" />
                            @Html.ActionLink("Regresar", "GetAll", "Materia", htmlAttributes: new { @class = "btn btn-danger" })
                        </div>

                    </div>
                 </div>
            }
        </div>
        
    </div>
</div>
<script type="text/javascript">
    function Previsualizar(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#ImagenPreview').attr('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);
        }
    }

</script>
<script src="../../Scripts/jquery-1.10.2.js" type="text/javascript"></script>
<script src="../../Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>

@Scripts.Render("~/bundles/jquery")
<script type="text/javascript">

    $(document).ready(function () {
        $("#ddlPais").change(function () {
            $("#ddlEstado").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetEstado")',
                dataType: 'json',
                data: { IdPais: $("#ddlPais").val() },
                success: function (estados) {
                    $("#ddlEstado").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                    $.each(estados, function (i, estados) {
                        $("#ddlEstado").append('<option value="'
                                                   + estados.IdEstado + '">'
                                                   + estados.Nombre + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }
            });
        });

       $("#ddlEstado").change(function () {
            $("#ddlMunicipio").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetMunicipio")',
                dataType: 'json',
                data: { IdEstado: $("#ddlEstado").val() },
                success: function (municipios) {
                    $("#ddlMunicipio").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                    $.each(municipios, function (i, municipios) {
                        $("#ddlMunicipio").append('<option value="'
                                                   + municipios.IdMunicipio + '">'
                                                   + municipios.Nombre + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }
            });
       });

        $("#ddlMunicipio").change(function () {
            $("#ddlColonia").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetColonia")',
                dataType: 'json',
                data: { IdMunicipio: $("#ddlMunicipio").val() },
                success: function (colonias) {
                    $("#ddlColonia").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                    $.each(colonias, function (i, colonias) {
                        $("#ddlColonia").append('<option value="'
                                                   + colonias.IdColonia + '">'
                                                   + colonias.Nombre + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }
            });

        });

    });
    function SoloLetras(e) {
        var letra = e.onkeypress.arguments[0].key;
        if (!/[^a-zA-Z]/.test(letra)) {
            $("#lblErrorNombre").hide();
            return true;
        }
        else {
            if (e.id == "txtNombre") {
                $("#lblErrorNombre").text('Solo se aceptan letras');
                $('#lblErrorNombre').css('display', 'block');
                //$("#lblErrorNombre").show();
            }
            else
                if (e.id == "txtApellidoPaterno") {
                    $("#lblErrorApellidoPaterno").text('Solo se aceptan letras');
                    $('#lblErrorApellidoPaterno').css('display', 'block');
                    //$("#lblErrrorApellidoPaterno").show();
                }
                else
                    if (e.id == "txtApellidoMaterno") {
                        $("#lblErrorApellidoMaterno").text('Solo se aceptan letras');
                        $('#lblErrorApellidoMaterno').css('display', 'block');
                        //$("#lblErrorApellidoMaterno").show();
                    }
            return false;
        }
    }

    function SoloNumeros(e) {
        //var letra = e.key;
        var letra = e.onkeypress.arguments[0].key;
        if (!/[^0-9]/g.test(letra)) {
            $("#lblErrorCelular").hide();
            return true;
        }
        else {
            if (e.id == "txtTelefono") {
                $("#lblErrorTelefono").text('Solo se aceptan números');
                $('#lblErrorTelefono').css('display', 'block');
            }
            else
                if (e.id == "txtCelular") {
                    $("#lblErrorCelular").text('Solo se aceptan números');
                    $('#lblErrorCelular').css('display', 'block');
                }
            return false;
        }
    }
    function ValidarEmail() {
        var txtEmail = $("#txtEmail");
        var regexToEmail = /^(([^<>()[\]\\.,;:\s@@"]+(\.[^<>()[\]\\.,;:\s@@"]+)*)|(".+"))@@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        if (regexToEmail.test(txtEmail.val())) {
            //Es un email correcto
            $('#txtEmail').css('border-color', 'green');
        }
        else {
            $('#txtEmail').css('border-color', 'red');
        }
    }

    function MatchEmail() {
        var txtEmail = $("#txtEmail");
        var txtEmailConfirmar = $("#txtEmailConfirmar");
        if (txtEmail.val() == txtEmailConfirmar.val()) {

            $('#txtEmailConfirmar').css('border-color', 'green');
        }
        else {
            $('#txtEmailConfirmar').css('border-color', 'red');

    
    }
    }
    function VerificarRango() {
        var txtNumeroExterior = $("#txtNumeroExterior").val();
        if (!(txtNumeroExterior.value >= 1 && txtNumeroExterior.value <= 100))
        {
            $("#lblErrorNumeroExterior").text('El valor debe de estar entre un rango de 1 y 100');
            $('#lblErrorNumeroExterior').css('display', 'block');
        }
    }
    function VerificarRangoInterior() {
        var txtNumeroInterior = $("#txtNumeroInterior").val();
        if (!(txtNumeroInterior.value >= 1 && txtNumeroInterior.value <= 100)) {
            $("#lblErrorNumeroInterior").text('El valor debe de estar entre un rango de 1 y 100');
            $('#lblErrorNumeroInterior').css('display', 'block');
        }
    }
    function VerificarPassword() {
        var txtPassword = $("#txtPassword");
        var regexPassword = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/;
        if (regexPassword.test(txtPassword.val())) {

            $('#txtPassword').css('border-color', 'green');
        }
        else
        {
            $('#txtPassword').css('border-color', 'red');
            $("#lblErrorPassword").text('La contraseña debe de tener al menos 8 caracteres y al menos una letra y numero');
            
        }
    }
    function CompararPassword() {
        var txtPassword = $("#txtPassword");
        var txtPasswordConfirmar = $("#txtPasswordConfirmar");
        if (txtPassword.val() == txtPasswordConfirmar.val()) {

            $('#txtPasswordConfirmar').css('border-color', 'green');
        }
        else {
            $('#txtPasswordConfirmar').css('border-color', 'red');

        }
    }
    function ValidarCurp() {
        var txtCURP = $("#txtCurp");
        var regextoCurp = /^.{5,5}$/;
        if (regextoCurp.test(txtCURP.val())) {
            
            $('#txtCurp').css('border-color', 'green');
        }
        else {
            $('#txtCurp').css('border-color', 'red');
            $("lblErrorCurp").text('La CURP debe de tener 5 caracteres');
            //$("lblErrorCurp").show();
        }
    }

</script>
